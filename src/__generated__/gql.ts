/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  mutation refreshToken {\n    refreshToken {\n      access_token\n    }\n  }\n": types.RefreshTokenDocument,
    "\n  mutation ValidateRoute($args: String!, $branch: String) {\n    validateRoute(args: $args, branch: $branch) {\n      acess\n      currentBranch {\n        branchId\n        branchName\n        companyId\n        companyName\n      }\n      path\n      reAccess\n      reFresh\n    }\n  }\n  ": types.ValidateRouteDocument,
    "\nquery Me {\n  me {\n    Role_Company {\n      access\n      id\n      name\n      __typename\n    }\n    companyBranch {\n      companyId\n      company {\n        companyCode\n        icon\n        id\n        name\n        __typename\n      }\n      createdAt\n      id\n      name\n      __typename\n    }\n    email\n    id\n    isOwner\n    profile {\n      id\n      bio\n      firstname_th\n      lastname_th\n      firstname_en\n      lastname_en\n      avatar\n      dob\n      age\n      relationship\n      shirt_size\n      prefix_th\n      prefix_en\n      citizen_id\n      social_id\n      staff_status\n      tel\n      address\n      gender\n      staff_code\n      religion\n      userId\n      citizen_addressnumber\n      citizen_address\n      citizen_country\n      citizen_province\n      citizen_district\n      citizen_state\n      citizen_zipcode\n      citizen_tel\n      contract_sameCitizen\n      contract_addressnumber\n      contract_address\n      contract_country\n      contract_province\n      contract_district\n      contract_state\n      contract_zipcode\n      contract_email\n      contract_companyemail\n      social_facebook\n      social_likedin\n      social_line\n      social_telegram\n      nickname\n      blood_type\n      employee_status\n      start_date_work\n      __typename\n    }\n  }\n}": types.MeDocument,
    "\n  query Company {\n    company {\n      _count {\n        branch\n      }\n      branch {\n        _count {\n          users\n        }\n        id\n        name\n        address\n        address_2\n        city\n        state\n        zip\n        country\n        tel\n        fax\n        website\n        lat\n        lng\n        email\n        email_2\n        company_type\n        main_business_type {\n          id\n        }\n        sub_company_type {\n          id\n        }\n        registeredamount\n        social_facebook\n        social_likedin\n        social_instragram\n        social_line\n        createdAt\n        updatedAt\n        regis_vat\n        regiscomnumber\n        photo_link\n        vat_link\n        certificate_link\n      }\n      userlimit\n      name\n    }\n  }\n": types.CompanyDocument,
    "\n    mutation CreatedPosition($data: [CreatedAndUpdatePosition!]) {\n        CreatedPosition(data: $data) {\n          message\n          status\n        }\n      }": types.CreatedPositionDocument,
    "\n    mutation EditPosition($data: [CreatedAndUpdatePosition!]) {\n        EditPosition(data: $data) {\n          message\n          status\n        }\n      }": types.EditPositionDocument,
    "mutation Delete_position1($deletePosition1Id: ID!) {\n        delete_position1(id: $deletePosition1Id) {\n          message\n          status\n        }\n      }": types.Delete_Position1Document,
    "mutation Delete_position2($deletePosition2Id: ID!) {\n        delete_position2(id: $deletePosition2Id) {\n          message\n          status\n        }\n      }": types.Delete_Position2Document,
    "mutation Delete_position3($deletePosition3Id: ID!) {\n        delete_position3(id: $deletePosition3Id) {\n          message\n          status\n        }\n      }": types.Delete_Position3Document,
    "\nmutation CreateAccountUser($data: CreateAccountUserInput!) {\n  createAccountUser(data: $data) {\n    message\n    status\n  }\n}": types.CreateAccountUserDocument,
    "\nmutation DeleteAccountUser($deleteAccountUserId: ID!) {\n  deleteAccountUser(id: $deleteAccountUserId) {\n    message\n    status\n  }\n}": types.DeleteAccountUserDocument,
    "\n  mutation Login($data: LoginaInput!) {\n    login(data: $data) {\n      access_token\n      refresh_token\n      status\n    }\n  }\n": types.LoginDocument,
    "\nmutation Mutation($data: createRoleCompanyGroup!) {\n    createRoleCompany(data: $data) {\n      message\n      status\n    }\n  }\n": types.MutationDocument,
    "\nmutation DeleteRoleCompany($deleteRoleCompanyId: ID!) {\n  deleteRoleCompany(id: $deleteRoleCompanyId) {\n    message\n    status\n  }\n}": types.DeleteRoleCompanyDocument,
    "\n  mutation CreateAccount($data: CreateAccountInput!) {\n    createAccount(data: $data) {\n      status\n      message\n  }\n}": types.CreateAccountDocument,
    "\n  query Query($companyname: String!) {\n  verifyCompanycode(companyname: $companyname)\n}\n": types.QueryDocument,
    "\nquery Getleava_alldata($name: String, $position2Id: ID, $position3Id: ID) {\n  getleava_alldata(name: $name, position2Id: $position2Id, position3Id: $position3Id) {\n      id\n      leavetype_id\n      mas_leave_type {\n        id\n        name\n        orderby\n      }\n      start_date\n      end_date\n      quantity_day\n      quantity_hours\n      detail_leave\n      Status\n      user_id\n      user {\n        id\n        email\n        profile {\n          id\n          firstname_th\n          lastname_th\n          firstname_en\n          lastname_en\n          avatar\n        }\n      }\n    }\n  }\n": types.Getleava_AlldataDocument,
    "\n  query FetchcompanySelect {\n    company {\n      name\n      branch{\n        _count{\n          users\n        }\n        id\n        name\n        address\n      }\n    }\n  }\n": types.FetchcompanySelectDocument,
    "\nquery GetownCompany {\n  getownCompany {\n    redirect\n    isOwner\n    company {\n      companyCode\n      icon\n      id\n      name\n    }\n    companies {\n      companyCode\n      icon\n      id\n      name\n    }\n  }\n}\n": types.GetownCompanyDocument,
    "\nquery GetBusinessType {\n  getBusinessType {\n    id\n    name\n    SubBusinessType {\n      id\n      name\n    }\n  }\n}\n": types.GetBusinessTypeDocument,
    "\nmutation CreateAndUpdateComBarance($data: createCompanyBranch!) {\n  createAndUpdateComBarance(data: $data) {\n    message\n    status\n  }\n}\n": types.CreateAndUpdateComBaranceDocument,
    "\nmutation DeleteComBarance($deleteComBaranceId: ID!) {\n  deleteComBarance(id: $deleteComBaranceId) {\n    message\n    status\n  }\n}\n": types.DeleteComBaranceDocument,
    "\nmutation EditActive($editActiveId: ID) {\n  editActive(id: $editActiveId) {\n    message\n    status\n  }\n}": types.EditActiveDocument,
    "\nmutation Forgotpassword($data: forgetpasswordInput) {\n    Forgotpassword(data: $data) {\n      message\n      status\n    }\n  }\n": types.ForgotpasswordDocument,
    "\nmutation Changesepasswordinforgot($data: changepasswordInforgotpasswordinput) {\n    Changesepasswordinforgot(data: $data) {\n      message\n      status\n    }\n  }\n": types.ChangesepasswordinforgotDocument,
    "\nquery GetHolidayDate($year: Int) {\n  GetHolidayDate(year: $year) {\n    data {\n      year\n      count\n      child {\n        id\n        holiday_name\n        day\n        month\n        year\n        status\n        holiday_yearId\n      }\n    }\n  }\n}\n": types.GetHolidayDateDocument,
    "\nquery GetHoliDayYear($year: Int) {\n  GetHoliDayYear(year: $year) {\n      id\n      day\n      month\n      year\n      holiday_name\n    }\n  }\n": types.GetHoliDayYearDocument,
    "\nmutation CreateHolidayYear($data: [CreateHolidayYears!]) {\n  createHolidayYear(data: $data) {\n    message\n    status\n  }\n}\n": types.CreateHolidayYearDocument,
    "\nmutation CreateAndUpdateHolidayDate($data: [CreateHolidayDate!]) {\n  createAndUpdateHolidayDate(data: $data) {\n    message\n    status\n  }\n}\n": types.CreateAndUpdateHolidayDateDocument,
    "\nquery GetAllleave($userId: ID, $name: String, $position2Id: ID, $position3Id: ID) {\n  getAllleave(userId: $userId, name: $name, position2Id: $position2Id, position3Id: $position3Id) {\n    data_all {\n      email\n      id\n      profile {\n        id\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        bio\n        dob\n        age\n        relationship\n        shirt_size\n        prefix_th\n        prefix_en\n        citizen_id\n        social_id\n        staff_status\n        tel\n        address\n        gender\n        staff_code\n        religion\n        userId\n        citizen_addressnumber\n        citizen_address\n        citizen_country\n        citizen_province\n        citizen_district\n        citizen_state\n        citizen_zipcode\n        citizen_tel\n        contract_sameCitizen\n        contract_addressnumber\n        contract_address\n        contract_country\n        contract_province\n        contract_district\n        contract_state\n        contract_zipcode\n        contract_email\n        contract_companyemail\n        social_facebook\n        social_likedin\n        social_line\n        social_telegram\n        nickname\n        blood_type\n        employee_status\n        start_date_work\n      }\n      Position_user {\n        id\n        user_id\n        position1_id\n        position2_id\n        position3_id\n        role\n        headderId\n        date\n        header {\n          id\n          email\n          profile {\n            id\n            firstname_th\n            lastname_th\n            firstname_en\n            lastname_en\n            avatar\n          }\n        }\n        mas_positionlevel1 {\n          id\n          name\n          level\n          code\n          type\n          CompanyId\n        }\n        mas_positionlevel2 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel1_id\n        }\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel2_id\n        }\n      }\n      data_leave {\n        id\n        leavetype_id\n        start_date\n        end_date\n        quantity_day\n        quantity_hours\n        detail_leave\n        Status\n        user_id\n        mas_leave_type {\n          id\n          name\n          orderby\n        }\n        link_pdf\n      }\n    }\n    data_count {\n      name_1\n      count1\n      name_2\n      count2\n      name_3\n      count3\n      name_4\n      count4\n    }\n  }\n}\n": types.GetAllleaveDocument,
    "\nquery Getleava_datame {\n    getleava_datame {\n      data_count {\n        name_1\n        count1\n        name_2\n        count2\n        name_3\n        count3\n        name_4\n        count4\n      }\n      data_all {\n        email\n        id\n        profile {\n          firstname_th\n          lastname_th\n          firstname_en\n          lastname_en\n          avatar\n          dob\n          id\n          userId\n          start_date_work\n          prefix_th\n          prefix_en\n        }\n        Position_user {\n          id\n          position1_id\n          position2_id\n          position3_id\n          user_id\n          role\n          headderId\n          date\n          mas_positionlevel1 {\n            id\n            name\n            level\n            code\n            type\n          }\n          mas_positionlevel2 {\n            id\n            name\n            level\n            code\n            type\n          }\n          mas_positionlevel3 {\n            id\n            name\n            level\n            code\n            type\n          }\n        }\n        data_leave {\n          id\n          leavetype_id\n          mas_leave_type {\n            id\n            name\n            orderby\n          }\n          link_pdf\n          start_date\n          end_date\n          quantity_day\n          quantity_hours\n          detail_leave\n          Status\n          user_id\n        }\n      }\n    }\n  }\n": types.Getleava_DatameDocument,
    "\nquery Getleavetypedata {\n  getleavetypedata {\n    id\n    name\n    orderby\n  }\n}\n": types.GetleavetypedataDocument,
    "\nmutation Createddata_leave($data: leave) {\n  createddata_leave(data: $data) {\n    message\n    status\n  }\n}\n": types.Createddata_LeaveDocument,
    "\nmutation Delete_leve($deleteLeveId: ID!) {\n  delete_leve(id: $deleteLeveId) {\n    message\n    status\n  }\n}\n": types.Delete_LeveDocument,
    "\nmutation Changeselfpassword($data: changepasswordinput) {\n    Changeselfpassword(data: $data) {\n      message\n      status\n    }\n  }\n": types.ChangeselfpasswordDocument,
    "\nquery getMasPositon {\n    getMasPositon {\n      id\n      name\n      level\n      code\n      type\n      mas_positionlevel2 {\n        type\n        code\n        name\n        level\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n        }\n        id\n      }\n      CompanyId\n      Position_user {\n        id\n        user_id\n        position1_id\n        position2_id\n        position3_id\n        role\n        headderId\n        date\n      }\n    }\n  }\n": types.GetMasPositonDocument,
    "\nquery Getposition_user($getpositionUserId: ID) {\n    getposition_user(id: $getpositionUserId) {\n      id\n      user {\n        id\n        email\n        password\n        profile {\n          firstname_th\n          lastname_th\n          id\n          firstname_en\n          lastname_en\n          prefix_th\n          prefix_en\n        }\n      }\n      position1_id\n      mas_positionlevel1 {\n        id\n        name\n        level\n      }\n      position2_id\n      mas_positionlevel2 {\n        id\n        name\n        level\n      }\n      position3_id\n      mas_positionlevel3 {\n        id\n        name\n        level\n      }\n      role\n      date\n      header {\n        id\n        email\n        profile {\n          firstname_th\n          lastname_th\n          firstname_en\n          lastname_en\n          prefix_th\n          prefix_en\n        }\n      }\n    }\n  }\n": types.Getposition_UserDocument,
    "\nquery GetpositionMe {\n  getpositionMe {\n    id\n    user {\n      email\n      id\n      profile {\n        id\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        dob\n        userId\n        start_date_work\n      }\n    }\n    header {\n      email\n      id\n      profile {\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        dob\n        start_date_work\n      }\n    }\n    position1_id\n    position2_id\n    position3_id\n    role\n    date\n    mas_positionlevel1 {\n      id\n      name\n      level\n      code\n      type\n    }\n    mas_positionlevel2 {\n      id\n      name\n      level\n      code\n      type\n    }\n    mas_positionlevel3 {\n      id\n      name\n      level\n      code\n      type\n    }\n  }\n}": types.GetpositionMeDocument,
    "\nmutation Createdposition_user($data: position!) {\n  createdposition_user(data: $data) {\n    message\n    status\n  }\n}": types.Createdposition_UserDocument,
    "\n  query getProvince {\n    getProvince {\n      name\n      id\n      district {\n        amphoe {\n          id\n          name\n          zipcode\n        }\n        id\n        name\n      }\n    }\n  }\n": types.GetProvinceDocument,
    "\nquery GetcompanyRole {\n    getcompanyRole {\n      access\n      id\n      name\n      status\n    }\n  }\n": types.GetcompanyRoleDocument,
    "\n  query GetcompanyRoleManagement {\n    getcompanyRole {\n      access\n      id\n      name\n  }\n}": types.GetcompanyRoleManagementDocument,
    "\n  mutation updateRoleCompanyManagement($data: [UpdateRoleCompanyMangementType!]!) {\n    updateRoleCompanyMangement(data: $data) {\n      message\n      status\n    }\n  }\n": types.UpdateRoleCompanyManagementDocument,
    "\nquery Mas_bank {\n  mas_bank {\n    id\n    name\n    }\n  }\n": types.Mas_BankDocument,
    "\nquery Data_salary($fristname: String, $position2: String, $position3: String) {\n  data_salary(fristname: $fristname, Position2: $position2, Position3: $position3) {\n    id\n    profile {\n      id\n      firstname_th\n      lastname_th\n      prefix_th\n      staff_code\n      staff_status\n      start_date_work\n      userId\n      employee_status\n      avatar\n    }\n    bookbank_log {\n      base_salary\n      id\n      date\n      bank_number\n      mas_bank {\n        id\n        name\n      }\n      mas_bankId\n      all_collectId\n      provident_com\n      provident_emp\n      userId\n      accept_date\n      accept_years\n      accept_month\n    }\n    Position_user {\n      position2_id\n      mas_positionlevel2 {\n        id\n        name\n        level\n        code\n        type\n        positionlevel1_id\n      }\n      position3_id\n      mas_positionlevel3 {\n        id\n        name\n        level\n        code\n        type\n        positionlevel2_id\n      }\n      id\n      user_id\n      position1_id\n      role\n      headderId\n      date\n      mas_positionlevel1 {\n        id\n        name\n        level\n        code\n        type\n        CompanyId\n      }\n    }\n    companyBranchId\n  }\n}\n": types.Data_SalaryDocument,
    "\nquery Mydata_salary($years: String) {\n  mydata_salary(years: $years) {\n    data_s {\n      salary {\n        id\n        month\n        years\n        commission\n        position_income\n        ot\n        bonus\n        special_income\n        other_income\n        travel_income\n        bursary\n        welfare_money\n        vatper\n        ss_per\n        vat\n        social_security\n        miss\n        ra\n        late\n        other\n        provident_employee\n        provident_company\n        total_income\n        total_expense\n        net\n        userId\n        bookbank_logId\n        mas_income_typeId\n        date\n        mas_salary_statusId\n        provident_date\n        pro_employee\n        pro_company\n        mas_all_collectId\n        socialYears\n        vatYears\n        incomeYears\n        mas_bankId\n        base_salary\n      }\n    }\n    all_years\n  }\n}\n": types.Mydata_SalaryDocument,
    "\nquery Salary($userId: String, $years: String) {\n  salary(userId: $userId, years: $years) {\n    data_s {\n      id\n      profile {\n        id\n        prefix_th\n        firstname_th\n        lastname_th\n      }\n      salary {\n        month\n        years\n        total_income\n        total_expense\n        net\n        id\n        commission\n        position_income\n        ot\n        bonus\n        special_income\n        other_income\n        travel_income\n        bursary\n        welfare_money\n        vatper\n        ss_per\n        vat\n        social_security\n        miss\n        ra\n        late\n        other\n        provident_employee\n        provident_company\n        userId\n        vatYears\n        socialYears\n        pro_employee\n        pro_company\n        provident_date\n        mas_salary_statusId\n        mas_income_typeId\n        mas_bankId\n        mas_all_collectId\n        incomeYears\n        date\n        bookbank_logId\n        base_salary\n      }\n      bookbank_log {\n        bank_number\n        base_salary\n        mas_bank {\n          name\n        }\n      }\n      companyBranch {\n        id\n        expense_company {\n          id\n          cal_date_salary\n          unix\n        }\n      }\n    }\n    all_years\n  }\n}\n": types.SalaryDocument,
    "\n  mutation Createandupdatesalary($data: salaryInput) {\n    Createandupdatesalary(data: $data) {\n      message\n      status\n    }\n  }\n": types.CreateandupdatesalaryDocument,
    "\n  mutation CreateAndUpdateExpenseCom($data: ExpenseComInput) {\n    CreateAndUpdateExpenseCom(data: $data) {\n      message\n      status\n    }\n  }\n": types.CreateAndUpdateExpenseComDocument,
    "\n  mutation Createandupdatebookbank($data: bookbank_logInput) {\n    Createandupdatebookbank(data: $data) {\n      message\n      status\n    }\n  }\n": types.CreateandupdatebookbankDocument,
    "\nmutation Deletebookbank($deletebookbankId: ID!) {\n  Deletebookbank(id: $deletebookbankId) {\n    message\n    status\n  }\n}\n": types.DeletebookbankDocument,
    "\nquery Bookbank_log_admin($userId: String) {\n  bookbank_log_admin(userId: $userId) {\n    id\n    date\n    mas_bankId\n    bank_number\n    base_salary\n    provident_com\n    provident_emp\n    mas_bank {\n      id\n      name\n    }\n    userId\n    accept_date\n    User {\n      companyBranch {\n        expense_company {\n          cal_date_salary\n        }\n      }\n    }\n    unix\n    accept_month\n  }\n}\n": types.Bookbank_Log_AdminDocument,
    "\nquery Filter_bookbank {\n  filter_bookbank {\n    id\n    date\n    mas_bankId\n    bank_number\n    base_salary\n    provident_com\n    provident_emp\n    mas_bank {\n      id\n      name\n      bank_code\n    }\n    User {\n      id\n      email\n      profile {\n        id\n        bio\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        dob\n        age\n        relationship\n        shirt_size\n        prefix_th\n        prefix_en\n        citizen_id\n        social_id\n        staff_status\n        tel\n        address\n        gender\n        staff_code\n        religion\n        userId\n        citizen_addressnumber\n        citizen_address\n        citizen_country\n        citizen_province\n        citizen_district\n        citizen_state\n        citizen_zipcode\n        citizen_tel\n        contract_sameCitizen\n        contract_addressnumber\n        contract_address\n        contract_country\n        contract_province\n        contract_district\n        contract_state\n        contract_zipcode\n        contract_email\n        contract_companyemail\n        social_facebook\n        social_likedin\n        social_line\n        social_telegram\n        nickname\n        blood_type\n        employee_status\n        start_date_work\n        masposition1_id\n        masposition2_id\n        masposition3_id\n      }\n      Position_user {\n        id\n        user_id\n        position1_id\n        position2_id\n        position3_id\n        mas_positionlevel1 {\n          id\n          name\n          level\n          code\n          type\n        }\n        mas_positionlevel2 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel1_id\n        }\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel2_id\n        }\n      }\n    }\n  }\n}\n": types.Filter_BookbankDocument,
    "\nquery Expense_company($date: String) {\n  expense_company(date: $date) {\n    id\n    vat_per\n    ss_per\n    mas_bank {\n      name\n      id\n    }\n    check_vat\n    date\n    cal_date_salary\n  }\n}\n": types.Expense_CompanyDocument,
    "\nquery Filter_bookbank_admin($userId: String) {\n  filter_bookbank_admin(userId: $userId) {\n    id\n    bank_number\n    base_salary\n    mas_bank {\n      name\n      id\n    }\n    userId\n    provident_com\n    provident_emp\n  }\n}\n": types.Filter_Bookbank_AdminDocument,
    "\nquery Show_pervspUser($userId: String, $date: String) {\n  show_pervspUser(userId: $userId, date: $date) {\n    id\n    email\n    bookbank_log {\n      base_salary\n      bank_number\n      provident_emp\n      provident_com\n    }\n    companyBranch {\n      expense_company {\n        ss_per\n        vat_per\n        check_vat\n      }\n      id\n    }\n  }\n}\n": types.Show_PervspUserDocument,
    "\nmutation Createandupdatesalary($data: salaryInput) {\n  Createandupdatesalary(data: $data) {\n    message\n    status\n  }\n}\n": types.CreateandupdatesalaryDocument,
    "\nmutation SalarySlip($userId: String, $date: Date) {\n  SalarySlip(userId: $userId, date: $date) {\n    message\n    path\n    status\n  }\n}\n": types.SalarySlipDocument,
    "\nquery Show_years($name: String) {\n  show_years(name: $name) {\n    id\n    name\n  }\n}\n": types.Show_YearsDocument,
    "\nmutation DeleteExpensecom($deleteExpensecomId: ID!) {\n  DeleteExpensecom(id: $deleteExpensecomId) {\n    message\n    status\n  }\n}\n": types.DeleteExpensecomDocument,
    "\nmutation DeleteSalary($salaryid: ID!, $userId: String!) {\n  DeleteSalary(salaryid: $salaryid, userId: $userId) {\n    message\n    status\n  }\n}\n": types.DeleteSalaryDocument,
    "\nquery Bookbank_log {\n  bookbank_log {\n    id\n    date\n    accept_date\n    base_salary\n    mas_bankId\n    bank_number\n    provident_com\n    provident_emp\n    accept_month\n    accept_years\n    userId\n    mas_bank {\n      id\n      name\n    }\n    User {\n      id\n      profile {\n        id\n        firstname_th\n        lastname_th\n        mas_positionlevel3 {\n          id\n          name\n        }\n      }\n    }\n    salary {\n      id\n      month\n      years\n      commission\n      position_income\n      ot\n      bonus\n      special_income\n      other_income\n      travel_income\n      bursary\n      welfare_money\n      vatper\n      ss_per\n      vat\n      social_security\n      miss\n      ra\n      late\n      other\n      provident_employee\n      provident_company\n      total_income\n      total_expense\n      net\n      userId\n      bookbank_logId\n      mas_income_typeId\n      date\n      mas_salary_statusId\n      provident_date\n      pro_employee\n      pro_company\n      mas_all_collectId\n      socialYears\n      vatYears\n      incomeYears\n      mas_bankId\n      base_salary\n    }\n  }\n}\n": types.Bookbank_LogDocument,
    "\nquery Users($name: String, $position2Id: ID, $position3Id: ID) {\n  users(name: $name, position2Id: $position2Id, position3Id: $position3Id) {\n      id\n      email\n      profile {\n        address\n        age\n        avatar\n        bio\n        citizen_address\n        citizen_addressnumber\n        citizen_country\n        citizen_district\n        citizen_id\n        citizen_province\n        citizen_state\n        citizen_tel\n        citizen_zipcode\n        contract_address\n        contract_addressnumber\n        contract_companyemail\n        contract_country\n        contract_district\n        id\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        dob\n        relationship\n        shirt_size\n        prefix_th\n        prefix_en\n        social_id\n        staff_status\n        tel\n        gender\n        staff_code\n        religion\n        userId\n        contract_sameCitizen\n        contract_province\n        contract_state\n        contract_zipcode\n        contract_email\n        social_facebook\n        social_likedin\n        social_line\n        social_telegram\n        nickname\n        blood_type\n        employee_status\n        start_date_work\n        user {\n          email\n          password\n        }\n      }\n      Role_Company {\n        id\n        name\n\n      }\n      Position_user {\n        date\n        mas_positionlevel1 {\n          id\n          name\n          level\n          code\n          type\n          CompanyId\n        }\n        mas_positionlevel2 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel1_id\n        }\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel2_id\n        }\n      }\n    }\n\n  }\n": types.UsersDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation refreshToken {\n    refreshToken {\n      access_token\n    }\n  }\n"): (typeof documents)["\n  mutation refreshToken {\n    refreshToken {\n      access_token\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ValidateRoute($args: String!, $branch: String) {\n    validateRoute(args: $args, branch: $branch) {\n      acess\n      currentBranch {\n        branchId\n        branchName\n        companyId\n        companyName\n      }\n      path\n      reAccess\n      reFresh\n    }\n  }\n  "): (typeof documents)["\n  mutation ValidateRoute($args: String!, $branch: String) {\n    validateRoute(args: $args, branch: $branch) {\n      acess\n      currentBranch {\n        branchId\n        branchName\n        companyId\n        companyName\n      }\n      path\n      reAccess\n      reFresh\n    }\n  }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Me {\n  me {\n    Role_Company {\n      access\n      id\n      name\n      __typename\n    }\n    companyBranch {\n      companyId\n      company {\n        companyCode\n        icon\n        id\n        name\n        __typename\n      }\n      createdAt\n      id\n      name\n      __typename\n    }\n    email\n    id\n    isOwner\n    profile {\n      id\n      bio\n      firstname_th\n      lastname_th\n      firstname_en\n      lastname_en\n      avatar\n      dob\n      age\n      relationship\n      shirt_size\n      prefix_th\n      prefix_en\n      citizen_id\n      social_id\n      staff_status\n      tel\n      address\n      gender\n      staff_code\n      religion\n      userId\n      citizen_addressnumber\n      citizen_address\n      citizen_country\n      citizen_province\n      citizen_district\n      citizen_state\n      citizen_zipcode\n      citizen_tel\n      contract_sameCitizen\n      contract_addressnumber\n      contract_address\n      contract_country\n      contract_province\n      contract_district\n      contract_state\n      contract_zipcode\n      contract_email\n      contract_companyemail\n      social_facebook\n      social_likedin\n      social_line\n      social_telegram\n      nickname\n      blood_type\n      employee_status\n      start_date_work\n      __typename\n    }\n  }\n}"): (typeof documents)["\nquery Me {\n  me {\n    Role_Company {\n      access\n      id\n      name\n      __typename\n    }\n    companyBranch {\n      companyId\n      company {\n        companyCode\n        icon\n        id\n        name\n        __typename\n      }\n      createdAt\n      id\n      name\n      __typename\n    }\n    email\n    id\n    isOwner\n    profile {\n      id\n      bio\n      firstname_th\n      lastname_th\n      firstname_en\n      lastname_en\n      avatar\n      dob\n      age\n      relationship\n      shirt_size\n      prefix_th\n      prefix_en\n      citizen_id\n      social_id\n      staff_status\n      tel\n      address\n      gender\n      staff_code\n      religion\n      userId\n      citizen_addressnumber\n      citizen_address\n      citizen_country\n      citizen_province\n      citizen_district\n      citizen_state\n      citizen_zipcode\n      citizen_tel\n      contract_sameCitizen\n      contract_addressnumber\n      contract_address\n      contract_country\n      contract_province\n      contract_district\n      contract_state\n      contract_zipcode\n      contract_email\n      contract_companyemail\n      social_facebook\n      social_likedin\n      social_line\n      social_telegram\n      nickname\n      blood_type\n      employee_status\n      start_date_work\n      __typename\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Company {\n    company {\n      _count {\n        branch\n      }\n      branch {\n        _count {\n          users\n        }\n        id\n        name\n        address\n        address_2\n        city\n        state\n        zip\n        country\n        tel\n        fax\n        website\n        lat\n        lng\n        email\n        email_2\n        company_type\n        main_business_type {\n          id\n        }\n        sub_company_type {\n          id\n        }\n        registeredamount\n        social_facebook\n        social_likedin\n        social_instragram\n        social_line\n        createdAt\n        updatedAt\n        regis_vat\n        regiscomnumber\n        photo_link\n        vat_link\n        certificate_link\n      }\n      userlimit\n      name\n    }\n  }\n"): (typeof documents)["\n  query Company {\n    company {\n      _count {\n        branch\n      }\n      branch {\n        _count {\n          users\n        }\n        id\n        name\n        address\n        address_2\n        city\n        state\n        zip\n        country\n        tel\n        fax\n        website\n        lat\n        lng\n        email\n        email_2\n        company_type\n        main_business_type {\n          id\n        }\n        sub_company_type {\n          id\n        }\n        registeredamount\n        social_facebook\n        social_likedin\n        social_instragram\n        social_line\n        createdAt\n        updatedAt\n        regis_vat\n        regiscomnumber\n        photo_link\n        vat_link\n        certificate_link\n      }\n      userlimit\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation CreatedPosition($data: [CreatedAndUpdatePosition!]) {\n        CreatedPosition(data: $data) {\n          message\n          status\n        }\n      }"): (typeof documents)["\n    mutation CreatedPosition($data: [CreatedAndUpdatePosition!]) {\n        CreatedPosition(data: $data) {\n          message\n          status\n        }\n      }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation EditPosition($data: [CreatedAndUpdatePosition!]) {\n        EditPosition(data: $data) {\n          message\n          status\n        }\n      }"): (typeof documents)["\n    mutation EditPosition($data: [CreatedAndUpdatePosition!]) {\n        EditPosition(data: $data) {\n          message\n          status\n        }\n      }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation Delete_position1($deletePosition1Id: ID!) {\n        delete_position1(id: $deletePosition1Id) {\n          message\n          status\n        }\n      }"): (typeof documents)["mutation Delete_position1($deletePosition1Id: ID!) {\n        delete_position1(id: $deletePosition1Id) {\n          message\n          status\n        }\n      }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation Delete_position2($deletePosition2Id: ID!) {\n        delete_position2(id: $deletePosition2Id) {\n          message\n          status\n        }\n      }"): (typeof documents)["mutation Delete_position2($deletePosition2Id: ID!) {\n        delete_position2(id: $deletePosition2Id) {\n          message\n          status\n        }\n      }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation Delete_position3($deletePosition3Id: ID!) {\n        delete_position3(id: $deletePosition3Id) {\n          message\n          status\n        }\n      }"): (typeof documents)["mutation Delete_position3($deletePosition3Id: ID!) {\n        delete_position3(id: $deletePosition3Id) {\n          message\n          status\n        }\n      }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateAccountUser($data: CreateAccountUserInput!) {\n  createAccountUser(data: $data) {\n    message\n    status\n  }\n}"): (typeof documents)["\nmutation CreateAccountUser($data: CreateAccountUserInput!) {\n  createAccountUser(data: $data) {\n    message\n    status\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation DeleteAccountUser($deleteAccountUserId: ID!) {\n  deleteAccountUser(id: $deleteAccountUserId) {\n    message\n    status\n  }\n}"): (typeof documents)["\nmutation DeleteAccountUser($deleteAccountUserId: ID!) {\n  deleteAccountUser(id: $deleteAccountUserId) {\n    message\n    status\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Login($data: LoginaInput!) {\n    login(data: $data) {\n      access_token\n      refresh_token\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation Login($data: LoginaInput!) {\n    login(data: $data) {\n      access_token\n      refresh_token\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Mutation($data: createRoleCompanyGroup!) {\n    createRoleCompany(data: $data) {\n      message\n      status\n    }\n  }\n"): (typeof documents)["\nmutation Mutation($data: createRoleCompanyGroup!) {\n    createRoleCompany(data: $data) {\n      message\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation DeleteRoleCompany($deleteRoleCompanyId: ID!) {\n  deleteRoleCompany(id: $deleteRoleCompanyId) {\n    message\n    status\n  }\n}"): (typeof documents)["\nmutation DeleteRoleCompany($deleteRoleCompanyId: ID!) {\n  deleteRoleCompany(id: $deleteRoleCompanyId) {\n    message\n    status\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateAccount($data: CreateAccountInput!) {\n    createAccount(data: $data) {\n      status\n      message\n  }\n}"): (typeof documents)["\n  mutation CreateAccount($data: CreateAccountInput!) {\n    createAccount(data: $data) {\n      status\n      message\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Query($companyname: String!) {\n  verifyCompanycode(companyname: $companyname)\n}\n"): (typeof documents)["\n  query Query($companyname: String!) {\n  verifyCompanycode(companyname: $companyname)\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Getleava_alldata($name: String, $position2Id: ID, $position3Id: ID) {\n  getleava_alldata(name: $name, position2Id: $position2Id, position3Id: $position3Id) {\n      id\n      leavetype_id\n      mas_leave_type {\n        id\n        name\n        orderby\n      }\n      start_date\n      end_date\n      quantity_day\n      quantity_hours\n      detail_leave\n      Status\n      user_id\n      user {\n        id\n        email\n        profile {\n          id\n          firstname_th\n          lastname_th\n          firstname_en\n          lastname_en\n          avatar\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery Getleava_alldata($name: String, $position2Id: ID, $position3Id: ID) {\n  getleava_alldata(name: $name, position2Id: $position2Id, position3Id: $position3Id) {\n      id\n      leavetype_id\n      mas_leave_type {\n        id\n        name\n        orderby\n      }\n      start_date\n      end_date\n      quantity_day\n      quantity_hours\n      detail_leave\n      Status\n      user_id\n      user {\n        id\n        email\n        profile {\n          id\n          firstname_th\n          lastname_th\n          firstname_en\n          lastname_en\n          avatar\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FetchcompanySelect {\n    company {\n      name\n      branch{\n        _count{\n          users\n        }\n        id\n        name\n        address\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchcompanySelect {\n    company {\n      name\n      branch{\n        _count{\n          users\n        }\n        id\n        name\n        address\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetownCompany {\n  getownCompany {\n    redirect\n    isOwner\n    company {\n      companyCode\n      icon\n      id\n      name\n    }\n    companies {\n      companyCode\n      icon\n      id\n      name\n    }\n  }\n}\n"): (typeof documents)["\nquery GetownCompany {\n  getownCompany {\n    redirect\n    isOwner\n    company {\n      companyCode\n      icon\n      id\n      name\n    }\n    companies {\n      companyCode\n      icon\n      id\n      name\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetBusinessType {\n  getBusinessType {\n    id\n    name\n    SubBusinessType {\n      id\n      name\n    }\n  }\n}\n"): (typeof documents)["\nquery GetBusinessType {\n  getBusinessType {\n    id\n    name\n    SubBusinessType {\n      id\n      name\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateAndUpdateComBarance($data: createCompanyBranch!) {\n  createAndUpdateComBarance(data: $data) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation CreateAndUpdateComBarance($data: createCompanyBranch!) {\n  createAndUpdateComBarance(data: $data) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation DeleteComBarance($deleteComBaranceId: ID!) {\n  deleteComBarance(id: $deleteComBaranceId) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation DeleteComBarance($deleteComBaranceId: ID!) {\n  deleteComBarance(id: $deleteComBaranceId) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation EditActive($editActiveId: ID) {\n  editActive(id: $editActiveId) {\n    message\n    status\n  }\n}"): (typeof documents)["\nmutation EditActive($editActiveId: ID) {\n  editActive(id: $editActiveId) {\n    message\n    status\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Forgotpassword($data: forgetpasswordInput) {\n    Forgotpassword(data: $data) {\n      message\n      status\n    }\n  }\n"): (typeof documents)["\nmutation Forgotpassword($data: forgetpasswordInput) {\n    Forgotpassword(data: $data) {\n      message\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Changesepasswordinforgot($data: changepasswordInforgotpasswordinput) {\n    Changesepasswordinforgot(data: $data) {\n      message\n      status\n    }\n  }\n"): (typeof documents)["\nmutation Changesepasswordinforgot($data: changepasswordInforgotpasswordinput) {\n    Changesepasswordinforgot(data: $data) {\n      message\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetHolidayDate($year: Int) {\n  GetHolidayDate(year: $year) {\n    data {\n      year\n      count\n      child {\n        id\n        holiday_name\n        day\n        month\n        year\n        status\n        holiday_yearId\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery GetHolidayDate($year: Int) {\n  GetHolidayDate(year: $year) {\n    data {\n      year\n      count\n      child {\n        id\n        holiday_name\n        day\n        month\n        year\n        status\n        holiday_yearId\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetHoliDayYear($year: Int) {\n  GetHoliDayYear(year: $year) {\n      id\n      day\n      month\n      year\n      holiday_name\n    }\n  }\n"): (typeof documents)["\nquery GetHoliDayYear($year: Int) {\n  GetHoliDayYear(year: $year) {\n      id\n      day\n      month\n      year\n      holiday_name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateHolidayYear($data: [CreateHolidayYears!]) {\n  createHolidayYear(data: $data) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation CreateHolidayYear($data: [CreateHolidayYears!]) {\n  createHolidayYear(data: $data) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation CreateAndUpdateHolidayDate($data: [CreateHolidayDate!]) {\n  createAndUpdateHolidayDate(data: $data) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation CreateAndUpdateHolidayDate($data: [CreateHolidayDate!]) {\n  createAndUpdateHolidayDate(data: $data) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetAllleave($userId: ID, $name: String, $position2Id: ID, $position3Id: ID) {\n  getAllleave(userId: $userId, name: $name, position2Id: $position2Id, position3Id: $position3Id) {\n    data_all {\n      email\n      id\n      profile {\n        id\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        bio\n        dob\n        age\n        relationship\n        shirt_size\n        prefix_th\n        prefix_en\n        citizen_id\n        social_id\n        staff_status\n        tel\n        address\n        gender\n        staff_code\n        religion\n        userId\n        citizen_addressnumber\n        citizen_address\n        citizen_country\n        citizen_province\n        citizen_district\n        citizen_state\n        citizen_zipcode\n        citizen_tel\n        contract_sameCitizen\n        contract_addressnumber\n        contract_address\n        contract_country\n        contract_province\n        contract_district\n        contract_state\n        contract_zipcode\n        contract_email\n        contract_companyemail\n        social_facebook\n        social_likedin\n        social_line\n        social_telegram\n        nickname\n        blood_type\n        employee_status\n        start_date_work\n      }\n      Position_user {\n        id\n        user_id\n        position1_id\n        position2_id\n        position3_id\n        role\n        headderId\n        date\n        header {\n          id\n          email\n          profile {\n            id\n            firstname_th\n            lastname_th\n            firstname_en\n            lastname_en\n            avatar\n          }\n        }\n        mas_positionlevel1 {\n          id\n          name\n          level\n          code\n          type\n          CompanyId\n        }\n        mas_positionlevel2 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel1_id\n        }\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel2_id\n        }\n      }\n      data_leave {\n        id\n        leavetype_id\n        start_date\n        end_date\n        quantity_day\n        quantity_hours\n        detail_leave\n        Status\n        user_id\n        mas_leave_type {\n          id\n          name\n          orderby\n        }\n        link_pdf\n      }\n    }\n    data_count {\n      name_1\n      count1\n      name_2\n      count2\n      name_3\n      count3\n      name_4\n      count4\n    }\n  }\n}\n"): (typeof documents)["\nquery GetAllleave($userId: ID, $name: String, $position2Id: ID, $position3Id: ID) {\n  getAllleave(userId: $userId, name: $name, position2Id: $position2Id, position3Id: $position3Id) {\n    data_all {\n      email\n      id\n      profile {\n        id\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        bio\n        dob\n        age\n        relationship\n        shirt_size\n        prefix_th\n        prefix_en\n        citizen_id\n        social_id\n        staff_status\n        tel\n        address\n        gender\n        staff_code\n        religion\n        userId\n        citizen_addressnumber\n        citizen_address\n        citizen_country\n        citizen_province\n        citizen_district\n        citizen_state\n        citizen_zipcode\n        citizen_tel\n        contract_sameCitizen\n        contract_addressnumber\n        contract_address\n        contract_country\n        contract_province\n        contract_district\n        contract_state\n        contract_zipcode\n        contract_email\n        contract_companyemail\n        social_facebook\n        social_likedin\n        social_line\n        social_telegram\n        nickname\n        blood_type\n        employee_status\n        start_date_work\n      }\n      Position_user {\n        id\n        user_id\n        position1_id\n        position2_id\n        position3_id\n        role\n        headderId\n        date\n        header {\n          id\n          email\n          profile {\n            id\n            firstname_th\n            lastname_th\n            firstname_en\n            lastname_en\n            avatar\n          }\n        }\n        mas_positionlevel1 {\n          id\n          name\n          level\n          code\n          type\n          CompanyId\n        }\n        mas_positionlevel2 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel1_id\n        }\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel2_id\n        }\n      }\n      data_leave {\n        id\n        leavetype_id\n        start_date\n        end_date\n        quantity_day\n        quantity_hours\n        detail_leave\n        Status\n        user_id\n        mas_leave_type {\n          id\n          name\n          orderby\n        }\n        link_pdf\n      }\n    }\n    data_count {\n      name_1\n      count1\n      name_2\n      count2\n      name_3\n      count3\n      name_4\n      count4\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Getleava_datame {\n    getleava_datame {\n      data_count {\n        name_1\n        count1\n        name_2\n        count2\n        name_3\n        count3\n        name_4\n        count4\n      }\n      data_all {\n        email\n        id\n        profile {\n          firstname_th\n          lastname_th\n          firstname_en\n          lastname_en\n          avatar\n          dob\n          id\n          userId\n          start_date_work\n          prefix_th\n          prefix_en\n        }\n        Position_user {\n          id\n          position1_id\n          position2_id\n          position3_id\n          user_id\n          role\n          headderId\n          date\n          mas_positionlevel1 {\n            id\n            name\n            level\n            code\n            type\n          }\n          mas_positionlevel2 {\n            id\n            name\n            level\n            code\n            type\n          }\n          mas_positionlevel3 {\n            id\n            name\n            level\n            code\n            type\n          }\n        }\n        data_leave {\n          id\n          leavetype_id\n          mas_leave_type {\n            id\n            name\n            orderby\n          }\n          link_pdf\n          start_date\n          end_date\n          quantity_day\n          quantity_hours\n          detail_leave\n          Status\n          user_id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery Getleava_datame {\n    getleava_datame {\n      data_count {\n        name_1\n        count1\n        name_2\n        count2\n        name_3\n        count3\n        name_4\n        count4\n      }\n      data_all {\n        email\n        id\n        profile {\n          firstname_th\n          lastname_th\n          firstname_en\n          lastname_en\n          avatar\n          dob\n          id\n          userId\n          start_date_work\n          prefix_th\n          prefix_en\n        }\n        Position_user {\n          id\n          position1_id\n          position2_id\n          position3_id\n          user_id\n          role\n          headderId\n          date\n          mas_positionlevel1 {\n            id\n            name\n            level\n            code\n            type\n          }\n          mas_positionlevel2 {\n            id\n            name\n            level\n            code\n            type\n          }\n          mas_positionlevel3 {\n            id\n            name\n            level\n            code\n            type\n          }\n        }\n        data_leave {\n          id\n          leavetype_id\n          mas_leave_type {\n            id\n            name\n            orderby\n          }\n          link_pdf\n          start_date\n          end_date\n          quantity_day\n          quantity_hours\n          detail_leave\n          Status\n          user_id\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Getleavetypedata {\n  getleavetypedata {\n    id\n    name\n    orderby\n  }\n}\n"): (typeof documents)["\nquery Getleavetypedata {\n  getleavetypedata {\n    id\n    name\n    orderby\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Createddata_leave($data: leave) {\n  createddata_leave(data: $data) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation Createddata_leave($data: leave) {\n  createddata_leave(data: $data) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Delete_leve($deleteLeveId: ID!) {\n  delete_leve(id: $deleteLeveId) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation Delete_leve($deleteLeveId: ID!) {\n  delete_leve(id: $deleteLeveId) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Changeselfpassword($data: changepasswordinput) {\n    Changeselfpassword(data: $data) {\n      message\n      status\n    }\n  }\n"): (typeof documents)["\nmutation Changeselfpassword($data: changepasswordinput) {\n    Changeselfpassword(data: $data) {\n      message\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getMasPositon {\n    getMasPositon {\n      id\n      name\n      level\n      code\n      type\n      mas_positionlevel2 {\n        type\n        code\n        name\n        level\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n        }\n        id\n      }\n      CompanyId\n      Position_user {\n        id\n        user_id\n        position1_id\n        position2_id\n        position3_id\n        role\n        headderId\n        date\n      }\n    }\n  }\n"): (typeof documents)["\nquery getMasPositon {\n    getMasPositon {\n      id\n      name\n      level\n      code\n      type\n      mas_positionlevel2 {\n        type\n        code\n        name\n        level\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n        }\n        id\n      }\n      CompanyId\n      Position_user {\n        id\n        user_id\n        position1_id\n        position2_id\n        position3_id\n        role\n        headderId\n        date\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Getposition_user($getpositionUserId: ID) {\n    getposition_user(id: $getpositionUserId) {\n      id\n      user {\n        id\n        email\n        password\n        profile {\n          firstname_th\n          lastname_th\n          id\n          firstname_en\n          lastname_en\n          prefix_th\n          prefix_en\n        }\n      }\n      position1_id\n      mas_positionlevel1 {\n        id\n        name\n        level\n      }\n      position2_id\n      mas_positionlevel2 {\n        id\n        name\n        level\n      }\n      position3_id\n      mas_positionlevel3 {\n        id\n        name\n        level\n      }\n      role\n      date\n      header {\n        id\n        email\n        profile {\n          firstname_th\n          lastname_th\n          firstname_en\n          lastname_en\n          prefix_th\n          prefix_en\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery Getposition_user($getpositionUserId: ID) {\n    getposition_user(id: $getpositionUserId) {\n      id\n      user {\n        id\n        email\n        password\n        profile {\n          firstname_th\n          lastname_th\n          id\n          firstname_en\n          lastname_en\n          prefix_th\n          prefix_en\n        }\n      }\n      position1_id\n      mas_positionlevel1 {\n        id\n        name\n        level\n      }\n      position2_id\n      mas_positionlevel2 {\n        id\n        name\n        level\n      }\n      position3_id\n      mas_positionlevel3 {\n        id\n        name\n        level\n      }\n      role\n      date\n      header {\n        id\n        email\n        profile {\n          firstname_th\n          lastname_th\n          firstname_en\n          lastname_en\n          prefix_th\n          prefix_en\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetpositionMe {\n  getpositionMe {\n    id\n    user {\n      email\n      id\n      profile {\n        id\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        dob\n        userId\n        start_date_work\n      }\n    }\n    header {\n      email\n      id\n      profile {\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        dob\n        start_date_work\n      }\n    }\n    position1_id\n    position2_id\n    position3_id\n    role\n    date\n    mas_positionlevel1 {\n      id\n      name\n      level\n      code\n      type\n    }\n    mas_positionlevel2 {\n      id\n      name\n      level\n      code\n      type\n    }\n    mas_positionlevel3 {\n      id\n      name\n      level\n      code\n      type\n    }\n  }\n}"): (typeof documents)["\nquery GetpositionMe {\n  getpositionMe {\n    id\n    user {\n      email\n      id\n      profile {\n        id\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        dob\n        userId\n        start_date_work\n      }\n    }\n    header {\n      email\n      id\n      profile {\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        dob\n        start_date_work\n      }\n    }\n    position1_id\n    position2_id\n    position3_id\n    role\n    date\n    mas_positionlevel1 {\n      id\n      name\n      level\n      code\n      type\n    }\n    mas_positionlevel2 {\n      id\n      name\n      level\n      code\n      type\n    }\n    mas_positionlevel3 {\n      id\n      name\n      level\n      code\n      type\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Createdposition_user($data: position!) {\n  createdposition_user(data: $data) {\n    message\n    status\n  }\n}"): (typeof documents)["\nmutation Createdposition_user($data: position!) {\n  createdposition_user(data: $data) {\n    message\n    status\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getProvince {\n    getProvince {\n      name\n      id\n      district {\n        amphoe {\n          id\n          name\n          zipcode\n        }\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProvince {\n    getProvince {\n      name\n      id\n      district {\n        amphoe {\n          id\n          name\n          zipcode\n        }\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GetcompanyRole {\n    getcompanyRole {\n      access\n      id\n      name\n      status\n    }\n  }\n"): (typeof documents)["\nquery GetcompanyRole {\n    getcompanyRole {\n      access\n      id\n      name\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetcompanyRoleManagement {\n    getcompanyRole {\n      access\n      id\n      name\n  }\n}"): (typeof documents)["\n  query GetcompanyRoleManagement {\n    getcompanyRole {\n      access\n      id\n      name\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateRoleCompanyManagement($data: [UpdateRoleCompanyMangementType!]!) {\n    updateRoleCompanyMangement(data: $data) {\n      message\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation updateRoleCompanyManagement($data: [UpdateRoleCompanyMangementType!]!) {\n    updateRoleCompanyMangement(data: $data) {\n      message\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Mas_bank {\n  mas_bank {\n    id\n    name\n    }\n  }\n"): (typeof documents)["\nquery Mas_bank {\n  mas_bank {\n    id\n    name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Data_salary($fristname: String, $position2: String, $position3: String) {\n  data_salary(fristname: $fristname, Position2: $position2, Position3: $position3) {\n    id\n    profile {\n      id\n      firstname_th\n      lastname_th\n      prefix_th\n      staff_code\n      staff_status\n      start_date_work\n      userId\n      employee_status\n      avatar\n    }\n    bookbank_log {\n      base_salary\n      id\n      date\n      bank_number\n      mas_bank {\n        id\n        name\n      }\n      mas_bankId\n      all_collectId\n      provident_com\n      provident_emp\n      userId\n      accept_date\n      accept_years\n      accept_month\n    }\n    Position_user {\n      position2_id\n      mas_positionlevel2 {\n        id\n        name\n        level\n        code\n        type\n        positionlevel1_id\n      }\n      position3_id\n      mas_positionlevel3 {\n        id\n        name\n        level\n        code\n        type\n        positionlevel2_id\n      }\n      id\n      user_id\n      position1_id\n      role\n      headderId\n      date\n      mas_positionlevel1 {\n        id\n        name\n        level\n        code\n        type\n        CompanyId\n      }\n    }\n    companyBranchId\n  }\n}\n"): (typeof documents)["\nquery Data_salary($fristname: String, $position2: String, $position3: String) {\n  data_salary(fristname: $fristname, Position2: $position2, Position3: $position3) {\n    id\n    profile {\n      id\n      firstname_th\n      lastname_th\n      prefix_th\n      staff_code\n      staff_status\n      start_date_work\n      userId\n      employee_status\n      avatar\n    }\n    bookbank_log {\n      base_salary\n      id\n      date\n      bank_number\n      mas_bank {\n        id\n        name\n      }\n      mas_bankId\n      all_collectId\n      provident_com\n      provident_emp\n      userId\n      accept_date\n      accept_years\n      accept_month\n    }\n    Position_user {\n      position2_id\n      mas_positionlevel2 {\n        id\n        name\n        level\n        code\n        type\n        positionlevel1_id\n      }\n      position3_id\n      mas_positionlevel3 {\n        id\n        name\n        level\n        code\n        type\n        positionlevel2_id\n      }\n      id\n      user_id\n      position1_id\n      role\n      headderId\n      date\n      mas_positionlevel1 {\n        id\n        name\n        level\n        code\n        type\n        CompanyId\n      }\n    }\n    companyBranchId\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Mydata_salary($years: String) {\n  mydata_salary(years: $years) {\n    data_s {\n      salary {\n        id\n        month\n        years\n        commission\n        position_income\n        ot\n        bonus\n        special_income\n        other_income\n        travel_income\n        bursary\n        welfare_money\n        vatper\n        ss_per\n        vat\n        social_security\n        miss\n        ra\n        late\n        other\n        provident_employee\n        provident_company\n        total_income\n        total_expense\n        net\n        userId\n        bookbank_logId\n        mas_income_typeId\n        date\n        mas_salary_statusId\n        provident_date\n        pro_employee\n        pro_company\n        mas_all_collectId\n        socialYears\n        vatYears\n        incomeYears\n        mas_bankId\n        base_salary\n      }\n    }\n    all_years\n  }\n}\n"): (typeof documents)["\nquery Mydata_salary($years: String) {\n  mydata_salary(years: $years) {\n    data_s {\n      salary {\n        id\n        month\n        years\n        commission\n        position_income\n        ot\n        bonus\n        special_income\n        other_income\n        travel_income\n        bursary\n        welfare_money\n        vatper\n        ss_per\n        vat\n        social_security\n        miss\n        ra\n        late\n        other\n        provident_employee\n        provident_company\n        total_income\n        total_expense\n        net\n        userId\n        bookbank_logId\n        mas_income_typeId\n        date\n        mas_salary_statusId\n        provident_date\n        pro_employee\n        pro_company\n        mas_all_collectId\n        socialYears\n        vatYears\n        incomeYears\n        mas_bankId\n        base_salary\n      }\n    }\n    all_years\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Salary($userId: String, $years: String) {\n  salary(userId: $userId, years: $years) {\n    data_s {\n      id\n      profile {\n        id\n        prefix_th\n        firstname_th\n        lastname_th\n      }\n      salary {\n        month\n        years\n        total_income\n        total_expense\n        net\n        id\n        commission\n        position_income\n        ot\n        bonus\n        special_income\n        other_income\n        travel_income\n        bursary\n        welfare_money\n        vatper\n        ss_per\n        vat\n        social_security\n        miss\n        ra\n        late\n        other\n        provident_employee\n        provident_company\n        userId\n        vatYears\n        socialYears\n        pro_employee\n        pro_company\n        provident_date\n        mas_salary_statusId\n        mas_income_typeId\n        mas_bankId\n        mas_all_collectId\n        incomeYears\n        date\n        bookbank_logId\n        base_salary\n      }\n      bookbank_log {\n        bank_number\n        base_salary\n        mas_bank {\n          name\n        }\n      }\n      companyBranch {\n        id\n        expense_company {\n          id\n          cal_date_salary\n          unix\n        }\n      }\n    }\n    all_years\n  }\n}\n"): (typeof documents)["\nquery Salary($userId: String, $years: String) {\n  salary(userId: $userId, years: $years) {\n    data_s {\n      id\n      profile {\n        id\n        prefix_th\n        firstname_th\n        lastname_th\n      }\n      salary {\n        month\n        years\n        total_income\n        total_expense\n        net\n        id\n        commission\n        position_income\n        ot\n        bonus\n        special_income\n        other_income\n        travel_income\n        bursary\n        welfare_money\n        vatper\n        ss_per\n        vat\n        social_security\n        miss\n        ra\n        late\n        other\n        provident_employee\n        provident_company\n        userId\n        vatYears\n        socialYears\n        pro_employee\n        pro_company\n        provident_date\n        mas_salary_statusId\n        mas_income_typeId\n        mas_bankId\n        mas_all_collectId\n        incomeYears\n        date\n        bookbank_logId\n        base_salary\n      }\n      bookbank_log {\n        bank_number\n        base_salary\n        mas_bank {\n          name\n        }\n      }\n      companyBranch {\n        id\n        expense_company {\n          id\n          cal_date_salary\n          unix\n        }\n      }\n    }\n    all_years\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Createandupdatesalary($data: salaryInput) {\n    Createandupdatesalary(data: $data) {\n      message\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation Createandupdatesalary($data: salaryInput) {\n    Createandupdatesalary(data: $data) {\n      message\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateAndUpdateExpenseCom($data: ExpenseComInput) {\n    CreateAndUpdateExpenseCom(data: $data) {\n      message\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CreateAndUpdateExpenseCom($data: ExpenseComInput) {\n    CreateAndUpdateExpenseCom(data: $data) {\n      message\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Createandupdatebookbank($data: bookbank_logInput) {\n    Createandupdatebookbank(data: $data) {\n      message\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation Createandupdatebookbank($data: bookbank_logInput) {\n    Createandupdatebookbank(data: $data) {\n      message\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Deletebookbank($deletebookbankId: ID!) {\n  Deletebookbank(id: $deletebookbankId) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation Deletebookbank($deletebookbankId: ID!) {\n  Deletebookbank(id: $deletebookbankId) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Bookbank_log_admin($userId: String) {\n  bookbank_log_admin(userId: $userId) {\n    id\n    date\n    mas_bankId\n    bank_number\n    base_salary\n    provident_com\n    provident_emp\n    mas_bank {\n      id\n      name\n    }\n    userId\n    accept_date\n    User {\n      companyBranch {\n        expense_company {\n          cal_date_salary\n        }\n      }\n    }\n    unix\n    accept_month\n  }\n}\n"): (typeof documents)["\nquery Bookbank_log_admin($userId: String) {\n  bookbank_log_admin(userId: $userId) {\n    id\n    date\n    mas_bankId\n    bank_number\n    base_salary\n    provident_com\n    provident_emp\n    mas_bank {\n      id\n      name\n    }\n    userId\n    accept_date\n    User {\n      companyBranch {\n        expense_company {\n          cal_date_salary\n        }\n      }\n    }\n    unix\n    accept_month\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Filter_bookbank {\n  filter_bookbank {\n    id\n    date\n    mas_bankId\n    bank_number\n    base_salary\n    provident_com\n    provident_emp\n    mas_bank {\n      id\n      name\n      bank_code\n    }\n    User {\n      id\n      email\n      profile {\n        id\n        bio\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        dob\n        age\n        relationship\n        shirt_size\n        prefix_th\n        prefix_en\n        citizen_id\n        social_id\n        staff_status\n        tel\n        address\n        gender\n        staff_code\n        religion\n        userId\n        citizen_addressnumber\n        citizen_address\n        citizen_country\n        citizen_province\n        citizen_district\n        citizen_state\n        citizen_zipcode\n        citizen_tel\n        contract_sameCitizen\n        contract_addressnumber\n        contract_address\n        contract_country\n        contract_province\n        contract_district\n        contract_state\n        contract_zipcode\n        contract_email\n        contract_companyemail\n        social_facebook\n        social_likedin\n        social_line\n        social_telegram\n        nickname\n        blood_type\n        employee_status\n        start_date_work\n        masposition1_id\n        masposition2_id\n        masposition3_id\n      }\n      Position_user {\n        id\n        user_id\n        position1_id\n        position2_id\n        position3_id\n        mas_positionlevel1 {\n          id\n          name\n          level\n          code\n          type\n        }\n        mas_positionlevel2 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel1_id\n        }\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel2_id\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Filter_bookbank {\n  filter_bookbank {\n    id\n    date\n    mas_bankId\n    bank_number\n    base_salary\n    provident_com\n    provident_emp\n    mas_bank {\n      id\n      name\n      bank_code\n    }\n    User {\n      id\n      email\n      profile {\n        id\n        bio\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        avatar\n        dob\n        age\n        relationship\n        shirt_size\n        prefix_th\n        prefix_en\n        citizen_id\n        social_id\n        staff_status\n        tel\n        address\n        gender\n        staff_code\n        religion\n        userId\n        citizen_addressnumber\n        citizen_address\n        citizen_country\n        citizen_province\n        citizen_district\n        citizen_state\n        citizen_zipcode\n        citizen_tel\n        contract_sameCitizen\n        contract_addressnumber\n        contract_address\n        contract_country\n        contract_province\n        contract_district\n        contract_state\n        contract_zipcode\n        contract_email\n        contract_companyemail\n        social_facebook\n        social_likedin\n        social_line\n        social_telegram\n        nickname\n        blood_type\n        employee_status\n        start_date_work\n        masposition1_id\n        masposition2_id\n        masposition3_id\n      }\n      Position_user {\n        id\n        user_id\n        position1_id\n        position2_id\n        position3_id\n        mas_positionlevel1 {\n          id\n          name\n          level\n          code\n          type\n        }\n        mas_positionlevel2 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel1_id\n        }\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel2_id\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Expense_company($date: String) {\n  expense_company(date: $date) {\n    id\n    vat_per\n    ss_per\n    mas_bank {\n      name\n      id\n    }\n    check_vat\n    date\n    cal_date_salary\n  }\n}\n"): (typeof documents)["\nquery Expense_company($date: String) {\n  expense_company(date: $date) {\n    id\n    vat_per\n    ss_per\n    mas_bank {\n      name\n      id\n    }\n    check_vat\n    date\n    cal_date_salary\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Filter_bookbank_admin($userId: String) {\n  filter_bookbank_admin(userId: $userId) {\n    id\n    bank_number\n    base_salary\n    mas_bank {\n      name\n      id\n    }\n    userId\n    provident_com\n    provident_emp\n  }\n}\n"): (typeof documents)["\nquery Filter_bookbank_admin($userId: String) {\n  filter_bookbank_admin(userId: $userId) {\n    id\n    bank_number\n    base_salary\n    mas_bank {\n      name\n      id\n    }\n    userId\n    provident_com\n    provident_emp\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Show_pervspUser($userId: String, $date: String) {\n  show_pervspUser(userId: $userId, date: $date) {\n    id\n    email\n    bookbank_log {\n      base_salary\n      bank_number\n      provident_emp\n      provident_com\n    }\n    companyBranch {\n      expense_company {\n        ss_per\n        vat_per\n        check_vat\n      }\n      id\n    }\n  }\n}\n"): (typeof documents)["\nquery Show_pervspUser($userId: String, $date: String) {\n  show_pervspUser(userId: $userId, date: $date) {\n    id\n    email\n    bookbank_log {\n      base_salary\n      bank_number\n      provident_emp\n      provident_com\n    }\n    companyBranch {\n      expense_company {\n        ss_per\n        vat_per\n        check_vat\n      }\n      id\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation Createandupdatesalary($data: salaryInput) {\n  Createandupdatesalary(data: $data) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation Createandupdatesalary($data: salaryInput) {\n  Createandupdatesalary(data: $data) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation SalarySlip($userId: String, $date: Date) {\n  SalarySlip(userId: $userId, date: $date) {\n    message\n    path\n    status\n  }\n}\n"): (typeof documents)["\nmutation SalarySlip($userId: String, $date: Date) {\n  SalarySlip(userId: $userId, date: $date) {\n    message\n    path\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Show_years($name: String) {\n  show_years(name: $name) {\n    id\n    name\n  }\n}\n"): (typeof documents)["\nquery Show_years($name: String) {\n  show_years(name: $name) {\n    id\n    name\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation DeleteExpensecom($deleteExpensecomId: ID!) {\n  DeleteExpensecom(id: $deleteExpensecomId) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation DeleteExpensecom($deleteExpensecomId: ID!) {\n  DeleteExpensecom(id: $deleteExpensecomId) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nmutation DeleteSalary($salaryid: ID!, $userId: String!) {\n  DeleteSalary(salaryid: $salaryid, userId: $userId) {\n    message\n    status\n  }\n}\n"): (typeof documents)["\nmutation DeleteSalary($salaryid: ID!, $userId: String!) {\n  DeleteSalary(salaryid: $salaryid, userId: $userId) {\n    message\n    status\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Bookbank_log {\n  bookbank_log {\n    id\n    date\n    accept_date\n    base_salary\n    mas_bankId\n    bank_number\n    provident_com\n    provident_emp\n    accept_month\n    accept_years\n    userId\n    mas_bank {\n      id\n      name\n    }\n    User {\n      id\n      profile {\n        id\n        firstname_th\n        lastname_th\n        mas_positionlevel3 {\n          id\n          name\n        }\n      }\n    }\n    salary {\n      id\n      month\n      years\n      commission\n      position_income\n      ot\n      bonus\n      special_income\n      other_income\n      travel_income\n      bursary\n      welfare_money\n      vatper\n      ss_per\n      vat\n      social_security\n      miss\n      ra\n      late\n      other\n      provident_employee\n      provident_company\n      total_income\n      total_expense\n      net\n      userId\n      bookbank_logId\n      mas_income_typeId\n      date\n      mas_salary_statusId\n      provident_date\n      pro_employee\n      pro_company\n      mas_all_collectId\n      socialYears\n      vatYears\n      incomeYears\n      mas_bankId\n      base_salary\n    }\n  }\n}\n"): (typeof documents)["\nquery Bookbank_log {\n  bookbank_log {\n    id\n    date\n    accept_date\n    base_salary\n    mas_bankId\n    bank_number\n    provident_com\n    provident_emp\n    accept_month\n    accept_years\n    userId\n    mas_bank {\n      id\n      name\n    }\n    User {\n      id\n      profile {\n        id\n        firstname_th\n        lastname_th\n        mas_positionlevel3 {\n          id\n          name\n        }\n      }\n    }\n    salary {\n      id\n      month\n      years\n      commission\n      position_income\n      ot\n      bonus\n      special_income\n      other_income\n      travel_income\n      bursary\n      welfare_money\n      vatper\n      ss_per\n      vat\n      social_security\n      miss\n      ra\n      late\n      other\n      provident_employee\n      provident_company\n      total_income\n      total_expense\n      net\n      userId\n      bookbank_logId\n      mas_income_typeId\n      date\n      mas_salary_statusId\n      provident_date\n      pro_employee\n      pro_company\n      mas_all_collectId\n      socialYears\n      vatYears\n      incomeYears\n      mas_bankId\n      base_salary\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Users($name: String, $position2Id: ID, $position3Id: ID) {\n  users(name: $name, position2Id: $position2Id, position3Id: $position3Id) {\n      id\n      email\n      profile {\n        address\n        age\n        avatar\n        bio\n        citizen_address\n        citizen_addressnumber\n        citizen_country\n        citizen_district\n        citizen_id\n        citizen_province\n        citizen_state\n        citizen_tel\n        citizen_zipcode\n        contract_address\n        contract_addressnumber\n        contract_companyemail\n        contract_country\n        contract_district\n        id\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        dob\n        relationship\n        shirt_size\n        prefix_th\n        prefix_en\n        social_id\n        staff_status\n        tel\n        gender\n        staff_code\n        religion\n        userId\n        contract_sameCitizen\n        contract_province\n        contract_state\n        contract_zipcode\n        contract_email\n        social_facebook\n        social_likedin\n        social_line\n        social_telegram\n        nickname\n        blood_type\n        employee_status\n        start_date_work\n        user {\n          email\n          password\n        }\n      }\n      Role_Company {\n        id\n        name\n\n      }\n      Position_user {\n        date\n        mas_positionlevel1 {\n          id\n          name\n          level\n          code\n          type\n          CompanyId\n        }\n        mas_positionlevel2 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel1_id\n        }\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel2_id\n        }\n      }\n    }\n\n  }\n"): (typeof documents)["\nquery Users($name: String, $position2Id: ID, $position3Id: ID) {\n  users(name: $name, position2Id: $position2Id, position3Id: $position3Id) {\n      id\n      email\n      profile {\n        address\n        age\n        avatar\n        bio\n        citizen_address\n        citizen_addressnumber\n        citizen_country\n        citizen_district\n        citizen_id\n        citizen_province\n        citizen_state\n        citizen_tel\n        citizen_zipcode\n        contract_address\n        contract_addressnumber\n        contract_companyemail\n        contract_country\n        contract_district\n        id\n        firstname_th\n        lastname_th\n        firstname_en\n        lastname_en\n        dob\n        relationship\n        shirt_size\n        prefix_th\n        prefix_en\n        social_id\n        staff_status\n        tel\n        gender\n        staff_code\n        religion\n        userId\n        contract_sameCitizen\n        contract_province\n        contract_state\n        contract_zipcode\n        contract_email\n        social_facebook\n        social_likedin\n        social_line\n        social_telegram\n        nickname\n        blood_type\n        employee_status\n        start_date_work\n        user {\n          email\n          password\n        }\n      }\n      Role_Company {\n        id\n        name\n\n      }\n      Position_user {\n        date\n        mas_positionlevel1 {\n          id\n          name\n          level\n          code\n          type\n          CompanyId\n        }\n        mas_positionlevel2 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel1_id\n        }\n        mas_positionlevel3 {\n          id\n          name\n          level\n          code\n          type\n          positionlevel2_id\n        }\n      }\n    }\n\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;